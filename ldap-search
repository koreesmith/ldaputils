#!/usr/bin/perl
use strict;
use warnings;
use Net::LDAP;
use Config::Tiny;

# Load the configuration file
my $config_file = './ldap_config.cfg';
my $config = Config::Tiny->new;
$config = Config::Tiny->read($config_file);

# Check if configuration was loaded correctly
die "Failed to read configuration file: $!" unless defined $config;

# Extract LDAP configuration
my $ldap_server = $config->{LDAP}->{ldap_server};
my $base_dn = $config->{LDAP}->{base_dn};
my $bind_dn = $config->{LDAP}->{bind_dn};
my $bind_password = $config->{LDAP}->{bind_password};

# Print to verify (optional)
print "LDAP Server: $ldap_server\n";
print "Base DN: $base_dn\n";
print "Bind DN: $bind_dn\n";
print "Bind Password: $bind_password\n";

# Check for command line arguments
if (@ARGV < 2) {
    print_usage();
    exit 1;
}

# Get the search type and search value from command line arguments
my ($search_type, $search_value) = @ARGV;

# Validate the search type
unless ($search_type eq 'uid' || $search_type eq 'uidNumber' || $search_type eq 'gecos') {
    print_usage();
    exit 1;
}

# Connect to the LDAP server
my $ldap = Net::LDAP->new($ldap_server) or die "Could not connect to $ldap_server: $@";

# Bind using Manager DN and Password
my $mesg = $ldap->bind($bind_dn, password => $bind_password);

# Check if bind was successful
if ($mesg->code) {
    die "LDAP bind failed: ", $mesg->error;
}

# Perform the LDAP search
my $result = $ldap->search(
    base   => $base_dn,
    filter => "($search_type=$search_value)",
);

# Check for errors
if ($result->code) {
    die "LDAP search failed: ", $result->error;
}

# Print the search results
foreach my $entry ($result->entries) {
    $entry->dump;
}

# Unbind from the LDAP server
$ldap->unbind;

# Function to print usage message
sub print_usage {
    print "Usage: $0 <search_type> <search_value>\n";
    print "  <search_type>  : uid | uidNumber | gecos\n";
    print "  <search_value> : Value to search for\n";
}

